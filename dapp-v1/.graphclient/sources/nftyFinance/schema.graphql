schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Erc20 {
  id: ID!
  liquidityShops(skip: Int = 0, first: Int = 100, orderBy: LiquidityShop_orderBy, orderDirection: OrderDirection, where: LiquidityShop_filter): [LiquidityShop!]!
  name: String!
  symbol: String!
  decimals: Int!
}

input Erc20_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityShops_: LiquidityShop_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Erc20_filter]
  or: [Erc20_filter]
}

enum Erc20_orderBy {
  id
  liquidityShops
  name
  symbol
  decimals
}

type LiquidityShop {
  id: ID!
  erc20: Erc20!
  nftCollection: NftCollection!
  owner: Bytes!
  automaticApproval: Boolean!
  allowRefinancingTerms: Boolean!
  balance: BigInt!
  maxOffer: BigInt!
  interestA: BigInt!
  interestB: BigInt!
  interestC: BigInt!
  name: String!
  status: LiquidityShopStatus!
  loans(skip: Int = 0, first: Int = 100, orderBy: Loan_orderBy, orderDirection: OrderDirection, where: Loan_filter): [Loan!]!
}

enum LiquidityShopStatus {
  ACTIVE
  INACTIVE
  FROZEN
}

input LiquidityShop_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  erc20: String
  erc20_not: String
  erc20_gt: String
  erc20_lt: String
  erc20_gte: String
  erc20_lte: String
  erc20_in: [String!]
  erc20_not_in: [String!]
  erc20_contains: String
  erc20_contains_nocase: String
  erc20_not_contains: String
  erc20_not_contains_nocase: String
  erc20_starts_with: String
  erc20_starts_with_nocase: String
  erc20_not_starts_with: String
  erc20_not_starts_with_nocase: String
  erc20_ends_with: String
  erc20_ends_with_nocase: String
  erc20_not_ends_with: String
  erc20_not_ends_with_nocase: String
  erc20_: Erc20_filter
  nftCollection: String
  nftCollection_not: String
  nftCollection_gt: String
  nftCollection_lt: String
  nftCollection_gte: String
  nftCollection_lte: String
  nftCollection_in: [String!]
  nftCollection_not_in: [String!]
  nftCollection_contains: String
  nftCollection_contains_nocase: String
  nftCollection_not_contains: String
  nftCollection_not_contains_nocase: String
  nftCollection_starts_with: String
  nftCollection_starts_with_nocase: String
  nftCollection_not_starts_with: String
  nftCollection_not_starts_with_nocase: String
  nftCollection_ends_with: String
  nftCollection_ends_with_nocase: String
  nftCollection_not_ends_with: String
  nftCollection_not_ends_with_nocase: String
  nftCollection_: NftCollection_filter
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  automaticApproval: Boolean
  automaticApproval_not: Boolean
  automaticApproval_in: [Boolean!]
  automaticApproval_not_in: [Boolean!]
  allowRefinancingTerms: Boolean
  allowRefinancingTerms_not: Boolean
  allowRefinancingTerms_in: [Boolean!]
  allowRefinancingTerms_not_in: [Boolean!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  maxOffer: BigInt
  maxOffer_not: BigInt
  maxOffer_gt: BigInt
  maxOffer_lt: BigInt
  maxOffer_gte: BigInt
  maxOffer_lte: BigInt
  maxOffer_in: [BigInt!]
  maxOffer_not_in: [BigInt!]
  interestA: BigInt
  interestA_not: BigInt
  interestA_gt: BigInt
  interestA_lt: BigInt
  interestA_gte: BigInt
  interestA_lte: BigInt
  interestA_in: [BigInt!]
  interestA_not_in: [BigInt!]
  interestB: BigInt
  interestB_not: BigInt
  interestB_gt: BigInt
  interestB_lt: BigInt
  interestB_gte: BigInt
  interestB_lte: BigInt
  interestB_in: [BigInt!]
  interestB_not_in: [BigInt!]
  interestC: BigInt
  interestC_not: BigInt
  interestC_gt: BigInt
  interestC_lt: BigInt
  interestC_gte: BigInt
  interestC_lte: BigInt
  interestC_in: [BigInt!]
  interestC_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  status: LiquidityShopStatus
  status_not: LiquidityShopStatus
  status_in: [LiquidityShopStatus!]
  status_not_in: [LiquidityShopStatus!]
  loans_: Loan_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityShop_filter]
  or: [LiquidityShop_filter]
}

enum LiquidityShop_orderBy {
  id
  erc20
  erc20__id
  erc20__name
  erc20__symbol
  erc20__decimals
  nftCollection
  nftCollection__id
  nftCollection__isErc1155
  owner
  automaticApproval
  allowRefinancingTerms
  balance
  maxOffer
  interestA
  interestB
  interestC
  name
  status
  loans
}

type Loan {
  id: ID!
  liquidityShop: LiquidityShop!
  amount: BigInt!
  remainder: BigInt!
  duration: BigInt!
  startTime: BigInt!
  nftCollateralId: BigInt!
  fee: BigInt!
  status: LoanStatus!
  lenderFeePercentage: BigInt!
  borrowerFeePercentage: BigInt!
  platformFeePercentage: BigInt!
  lender: Bytes!
  borrower: Bytes!
}

enum LoanStatus {
  ACTIVE
  RESOLVED
  INACTIVE
}

input Loan_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityShop: String
  liquidityShop_not: String
  liquidityShop_gt: String
  liquidityShop_lt: String
  liquidityShop_gte: String
  liquidityShop_lte: String
  liquidityShop_in: [String!]
  liquidityShop_not_in: [String!]
  liquidityShop_contains: String
  liquidityShop_contains_nocase: String
  liquidityShop_not_contains: String
  liquidityShop_not_contains_nocase: String
  liquidityShop_starts_with: String
  liquidityShop_starts_with_nocase: String
  liquidityShop_not_starts_with: String
  liquidityShop_not_starts_with_nocase: String
  liquidityShop_ends_with: String
  liquidityShop_ends_with_nocase: String
  liquidityShop_not_ends_with: String
  liquidityShop_not_ends_with_nocase: String
  liquidityShop_: LiquidityShop_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  remainder: BigInt
  remainder_not: BigInt
  remainder_gt: BigInt
  remainder_lt: BigInt
  remainder_gte: BigInt
  remainder_lte: BigInt
  remainder_in: [BigInt!]
  remainder_not_in: [BigInt!]
  duration: BigInt
  duration_not: BigInt
  duration_gt: BigInt
  duration_lt: BigInt
  duration_gte: BigInt
  duration_lte: BigInt
  duration_in: [BigInt!]
  duration_not_in: [BigInt!]
  startTime: BigInt
  startTime_not: BigInt
  startTime_gt: BigInt
  startTime_lt: BigInt
  startTime_gte: BigInt
  startTime_lte: BigInt
  startTime_in: [BigInt!]
  startTime_not_in: [BigInt!]
  nftCollateralId: BigInt
  nftCollateralId_not: BigInt
  nftCollateralId_gt: BigInt
  nftCollateralId_lt: BigInt
  nftCollateralId_gte: BigInt
  nftCollateralId_lte: BigInt
  nftCollateralId_in: [BigInt!]
  nftCollateralId_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  status: LoanStatus
  status_not: LoanStatus
  status_in: [LoanStatus!]
  status_not_in: [LoanStatus!]
  lenderFeePercentage: BigInt
  lenderFeePercentage_not: BigInt
  lenderFeePercentage_gt: BigInt
  lenderFeePercentage_lt: BigInt
  lenderFeePercentage_gte: BigInt
  lenderFeePercentage_lte: BigInt
  lenderFeePercentage_in: [BigInt!]
  lenderFeePercentage_not_in: [BigInt!]
  borrowerFeePercentage: BigInt
  borrowerFeePercentage_not: BigInt
  borrowerFeePercentage_gt: BigInt
  borrowerFeePercentage_lt: BigInt
  borrowerFeePercentage_gte: BigInt
  borrowerFeePercentage_lte: BigInt
  borrowerFeePercentage_in: [BigInt!]
  borrowerFeePercentage_not_in: [BigInt!]
  platformFeePercentage: BigInt
  platformFeePercentage_not: BigInt
  platformFeePercentage_gt: BigInt
  platformFeePercentage_lt: BigInt
  platformFeePercentage_gte: BigInt
  platformFeePercentage_lte: BigInt
  platformFeePercentage_in: [BigInt!]
  platformFeePercentage_not_in: [BigInt!]
  lender: Bytes
  lender_not: Bytes
  lender_gt: Bytes
  lender_lt: Bytes
  lender_gte: Bytes
  lender_lte: Bytes
  lender_in: [Bytes!]
  lender_not_in: [Bytes!]
  lender_contains: Bytes
  lender_not_contains: Bytes
  borrower: Bytes
  borrower_not: Bytes
  borrower_gt: Bytes
  borrower_lt: Bytes
  borrower_gte: Bytes
  borrower_lte: Bytes
  borrower_in: [Bytes!]
  borrower_not_in: [Bytes!]
  borrower_contains: Bytes
  borrower_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Loan_filter]
  or: [Loan_filter]
}

enum Loan_orderBy {
  id
  liquidityShop
  liquidityShop__id
  liquidityShop__owner
  liquidityShop__automaticApproval
  liquidityShop__allowRefinancingTerms
  liquidityShop__balance
  liquidityShop__maxOffer
  liquidityShop__interestA
  liquidityShop__interestB
  liquidityShop__interestC
  liquidityShop__name
  liquidityShop__status
  amount
  remainder
  duration
  startTime
  nftCollateralId
  fee
  status
  lenderFeePercentage
  borrowerFeePercentage
  platformFeePercentage
  lender
  borrower
}

type NftCollection {
  id: ID!
  liquidityShops(skip: Int = 0, first: Int = 100, orderBy: LiquidityShop_orderBy, orderDirection: OrderDirection, where: LiquidityShop_filter): [LiquidityShop!]!
  isErc1155: Boolean!
}

input NftCollection_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityShops_: LiquidityShop_filter
  isErc1155: Boolean
  isErc1155_not: Boolean
  isErc1155_in: [Boolean!]
  isErc1155_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NftCollection_filter]
  or: [NftCollection_filter]
}

enum NftCollection_orderBy {
  id
  liquidityShops
  isErc1155
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type ProtocolParams {
  id: ID!
  owner: Bytes!
  paused: Boolean!
  loanOriginationFeePercentage: BigInt!
  lenderFeePercentage: BigInt!
  borrowerFeePercentage: BigInt!
  platformFeePercentage: BigInt!
  oraclePriceExpirationDuration: BigInt!
  promissoryNote: Bytes!
  obligationReceipt: Bytes!
  oracle: Bytes!
  nftyToken: Bytes!
}

input ProtocolParams_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  paused: Boolean
  paused_not: Boolean
  paused_in: [Boolean!]
  paused_not_in: [Boolean!]
  loanOriginationFeePercentage: BigInt
  loanOriginationFeePercentage_not: BigInt
  loanOriginationFeePercentage_gt: BigInt
  loanOriginationFeePercentage_lt: BigInt
  loanOriginationFeePercentage_gte: BigInt
  loanOriginationFeePercentage_lte: BigInt
  loanOriginationFeePercentage_in: [BigInt!]
  loanOriginationFeePercentage_not_in: [BigInt!]
  lenderFeePercentage: BigInt
  lenderFeePercentage_not: BigInt
  lenderFeePercentage_gt: BigInt
  lenderFeePercentage_lt: BigInt
  lenderFeePercentage_gte: BigInt
  lenderFeePercentage_lte: BigInt
  lenderFeePercentage_in: [BigInt!]
  lenderFeePercentage_not_in: [BigInt!]
  borrowerFeePercentage: BigInt
  borrowerFeePercentage_not: BigInt
  borrowerFeePercentage_gt: BigInt
  borrowerFeePercentage_lt: BigInt
  borrowerFeePercentage_gte: BigInt
  borrowerFeePercentage_lte: BigInt
  borrowerFeePercentage_in: [BigInt!]
  borrowerFeePercentage_not_in: [BigInt!]
  platformFeePercentage: BigInt
  platformFeePercentage_not: BigInt
  platformFeePercentage_gt: BigInt
  platformFeePercentage_lt: BigInt
  platformFeePercentage_gte: BigInt
  platformFeePercentage_lte: BigInt
  platformFeePercentage_in: [BigInt!]
  platformFeePercentage_not_in: [BigInt!]
  oraclePriceExpirationDuration: BigInt
  oraclePriceExpirationDuration_not: BigInt
  oraclePriceExpirationDuration_gt: BigInt
  oraclePriceExpirationDuration_lt: BigInt
  oraclePriceExpirationDuration_gte: BigInt
  oraclePriceExpirationDuration_lte: BigInt
  oraclePriceExpirationDuration_in: [BigInt!]
  oraclePriceExpirationDuration_not_in: [BigInt!]
  promissoryNote: Bytes
  promissoryNote_not: Bytes
  promissoryNote_gt: Bytes
  promissoryNote_lt: Bytes
  promissoryNote_gte: Bytes
  promissoryNote_lte: Bytes
  promissoryNote_in: [Bytes!]
  promissoryNote_not_in: [Bytes!]
  promissoryNote_contains: Bytes
  promissoryNote_not_contains: Bytes
  obligationReceipt: Bytes
  obligationReceipt_not: Bytes
  obligationReceipt_gt: Bytes
  obligationReceipt_lt: Bytes
  obligationReceipt_gte: Bytes
  obligationReceipt_lte: Bytes
  obligationReceipt_in: [Bytes!]
  obligationReceipt_not_in: [Bytes!]
  obligationReceipt_contains: Bytes
  obligationReceipt_not_contains: Bytes
  oracle: Bytes
  oracle_not: Bytes
  oracle_gt: Bytes
  oracle_lt: Bytes
  oracle_gte: Bytes
  oracle_lte: Bytes
  oracle_in: [Bytes!]
  oracle_not_in: [Bytes!]
  oracle_contains: Bytes
  oracle_not_contains: Bytes
  nftyToken: Bytes
  nftyToken_not: Bytes
  nftyToken_gt: Bytes
  nftyToken_lt: Bytes
  nftyToken_gte: Bytes
  nftyToken_lte: Bytes
  nftyToken_in: [Bytes!]
  nftyToken_not_in: [Bytes!]
  nftyToken_contains: Bytes
  nftyToken_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProtocolParams_filter]
  or: [ProtocolParams_filter]
}

enum ProtocolParams_orderBy {
  id
  owner
  paused
  loanOriginationFeePercentage
  lenderFeePercentage
  borrowerFeePercentage
  platformFeePercentage
  oraclePriceExpirationDuration
  promissoryNote
  obligationReceipt
  oracle
  nftyToken
}

type Query {
  liquidityShop(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityShop
  liquidityShops(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityShop_orderBy
    orderDirection: OrderDirection
    where: LiquidityShop_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityShop!]!
  protocolParams(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolParams_orderBy
    orderDirection: OrderDirection
    where: ProtocolParams_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolParams!]!
  erc20(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Erc20
  erc20S(
    skip: Int = 0
    first: Int = 100
    orderBy: Erc20_orderBy
    orderDirection: OrderDirection
    where: Erc20_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Erc20!]!
  nftCollection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NftCollection
  nftCollections(
    skip: Int = 0
    first: Int = 100
    orderBy: NftCollection_orderBy
    orderDirection: OrderDirection
    where: NftCollection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NftCollection!]!
  loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  liquidityShop(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityShop
  liquidityShops(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityShop_orderBy
    orderDirection: OrderDirection
    where: LiquidityShop_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityShop!]!
  protocolParams(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolParams_orderBy
    orderDirection: OrderDirection
    where: ProtocolParams_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolParams!]!
  erc20(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Erc20
  erc20S(
    skip: Int = 0
    first: Int = 100
    orderBy: Erc20_orderBy
    orderDirection: OrderDirection
    where: Erc20_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Erc20!]!
  nftCollection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NftCollection
  nftCollections(
    skip: Int = 0
    first: Int = 100
    orderBy: NftCollection_orderBy
    orderDirection: OrderDirection
    where: NftCollection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NftCollection!]!
  loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}