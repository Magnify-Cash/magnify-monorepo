enum LendingDeskStatus {
  Active
  Frozen
  Dissolved
}

enum LoanStatus {
  Active
  Resolved
  Defaulted
}

type LoanConfig @entity {
  id: ID!
  lendingDesk: LendingDesk!
  nftCollection: NftCollection!
  minAmount: BigInt!
  maxAmount: BigInt!
  minInterest: BigInt!
  maxInterest: BigInt!
  minDuration: BigInt!
  maxDuration: BigInt!
}

type LendingDesk @entity {
  id: ID!
  owner: User!
  erc20: Erc20!
  balance: BigInt!
  status: LendingDeskStatus!
  loansCount: BigInt!
  loansDefaultedCount: BigInt!
  loansResolvedCount: BigInt!
  amountBorrowed: BigInt!
  netLiquidityIssued: BigInt!
  netProfit: BigInt!
  loanConfigs: [LoanConfig!]! @derivedFrom(field: "lendingDesk")
  loans: [Loan!]! @derivedFrom(field: "lendingDesk")
}

type ProtocolParams @entity {
  id: ID!
  owner: Bytes!
  paused: Boolean!
  loanOriginationFee: BigInt!
  promissoryNotes: Bytes!
  obligationNotes: Bytes!
  lendingKeys: Bytes!
  platformWallet: Bytes!
  lendingDesksCount: BigInt!
  loansCount: BigInt!
}

type Erc20 @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  lendingDesks: [LendingDesk!]! @derivedFrom(field: "erc20")
}

type NftCollection @entity {
  id: ID!
  isErc1155: Boolean!
  loanConfigs: [LoanConfig!]! @derivedFrom(field: "nftCollection")
}

type Loan @entity {
  id: ID!
  lendingDesk: LendingDesk!
  amount: BigInt!
  amountPaidBack: BigInt!
  duration: BigInt!
  startTime: BigInt!
  nftCollection: NftCollection!
  nftId: BigInt!
  interest: BigInt!
  status: LoanStatus!
  lender: User!
  borrower: User!
}

type User @entity {
  id: ID!
  loansIssuedCount: BigInt!
  loansIssuedResolvedCount: BigInt!
  loansIssuedDefaultedCount: BigInt!
  loansTakenCount: BigInt!
  loansTakenResolvedCount: BigInt!
  loansTakenDefaultedCount: BigInt!
  loansIssued: [Loan!]! @derivedFrom(field: "lender")
  loansTaken: [Loan!]! @derivedFrom(field: "borrower")
  lendingDesks: [LendingDesk!]! @derivedFrom(field: "owner")
}
